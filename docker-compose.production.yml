# Production Docker Compose for Local Testing
# This file is for testing production-like environment locally
# Actual production uses Kubernetes on EKS

version: '3.8'

services:
  # API Gateway
  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/hktourismdb
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - hk-tourism-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # User Service
  user-service:
    build:
      context: ./backend/services/user-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/hktourismdb
    depends_on:
      - postgres
    networks:
      - hk-tourism-network
    restart: unless-stopped

  # Location Service
  location-service:
    build:
      context: ./backend/services/location-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/hktourismdb
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - hk-tourism-network
    restart: unless-stopped

  # Recommendation Service
  recommendation-service:
    build:
      context: ./backend/services/recommendation-service
      dockerfile: Dockerfile
    environment:
      - ENVIRONMENT=production
      - PORT=8000
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/hktourismdb
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - hk-tourism-network
    restart: unless-stopped

  # Itinerary Service
  itinerary-service:
    build:
      context: ./backend/services/itinerary-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3003
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/hktourismdb
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - hk-tourism-network
    restart: unless-stopped

  # Event Service
  event-service:
    build:
      context: ./backend/services/event-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3004
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/hktourismdb
    depends_on:
      - postgres
    networks:
      - hk-tourism-network
    restart: unless-stopped

  # Crowd Service
  crowd-service:
    build:
      context: ./backend/services/crowd-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3005
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/hktourismdb
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - hk-tourism-network
    restart: unless-stopped

  # Local Insights Service
  local-insights-service:
    build:
      context: ./backend/services/local-insights-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3006
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/hktourismdb
    depends_on:
      - postgres
    networks:
      - hk-tourism-network
    restart: unless-stopped

  # Translation Service
  translation-service:
    build:
      context: ./backend/services/translation-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3007
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/hktourismdb
    depends_on:
      - postgres
    networks:
      - hk-tourism-network
    restart: unless-stopped

  # Practical Tips Service
  practical-tips-service:
    build:
      context: ./backend/services/practical-tips-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3008
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/hktourismdb
    depends_on:
      - postgres
    networks:
      - hk-tourism-network
    restart: unless-stopped

  # Notification Service
  notification-service:
    build:
      context: ./backend/services/notification-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3009
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/hktourismdb
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - hk-tourism-network
    restart: unless-stopped

  # Sustainability Service
  sustainability-service:
    build:
      context: ./backend/services/sustainability-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3010
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/hktourismdb
    depends_on:
      - postgres
    networks:
      - hk-tourism-network
    restart: unless-stopped

  # Privacy Service
  privacy-service:
    build:
      context: ./backend/services/privacy-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3011
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/hktourismdb
    depends_on:
      - postgres
    networks:
      - hk-tourism-network
    restart: unless-stopped

  # Weather Service
  weather-service:
    build:
      context: ./backend/services/weather-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3012
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/hktourismdb
    depends_on:
      - postgres
    networks:
      - hk-tourism-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=hktourismdb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - hk-tourism-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass redispassword
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - hk-tourism-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer (simulating ALB)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
    networks:
      - hk-tourism-network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - hk-tourism-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - hk-tourism-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  hk-tourism-network:
    driver: bridge